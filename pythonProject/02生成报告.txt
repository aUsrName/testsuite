环境
1、插件 allure-pytest
2、下载文件 zip
github.com/allure-framework/allure/releases
    配置环境变量 path  bin路径，如E:\api-frame\pythonProject\allure-2.23.1\bin
3、重启pycharm验证是否成功   dos pycharm
    allure --version

生成allure报告
1、生成临时的json报告   .ini
    allure临时json报告,如放到temps，--clean-alluredir,每次生成清理文件夹
    --alluredir=temps --clean-alluredir

2、根据json生成html的allure报告  run.py
    allure命令，从temps生成，output到reports下，每次进行清空
    os.system('allure generate ./temps -o ./reports --clean')

企业级allure报告定制
1、企业logo定制
修改allure文件的配置文件，allure/config/allure.yml
改的插件位置是allure/plugins/custom-logo-plugin,名字加到allure.yml
plugins:
  - junit-xml-plugin
  - xunit-xml-plugin
  - trx-plugin
  - behaviors-plugin
  - packages-plugin
  - screen-diff-plugin
  - xctest-plugin
  - jira-plugin
  - xray-plugin
  - custom-logo-plugin
文件在static里 \allure-2.29.0\plugins\custom-logo-plugin
名字在style.css  background: url('custom-logo.svg') no-repeat left center !important;
更改样式同理，如：
/*
.side-nav__brand {
  background: url('custom-logo.svg') no-repeat left center !important;
  margin-left: 10px;
}
*/

.side-nav__brand {
  background: url('custom-logo.svg') no-repeat left center !important;
  margin-left: 10px;
  height:90px;
  background-size: contain !important;
}

.side-nav__brand-text {
  display: none;
}

2、项目机构报告定制
    报告左边定制：
    1）项目名称 使用装饰器加到类上，@allure.epic('项目名称')
    2）模块名称 使用装饰器加到类上，@allure.feature('模块名称')
    3）接口名称 使用装饰器加到类的方法上，@allure.story('接口名称')
        方法二：
        在方法中使用代码，allure.dynamic.story('接口名称')
    4）用例名称
        方法一：
        使用装饰器加到类的方法上，@allure.title('用例名称')

        方法二：
        在方法中使用代码，allure.dynamic.title('用例名称')

    报告右边定制：
    1）优先级(严重程度)： BLOCKER 致命的  CRITICAL 严重的  NORMAL 一般
        MINOR 提示  TRIVIAL 不重要，轻微
        使用装饰器加到类的方法上，@allure.severity(allure.severity_level.BLOCKER)
        方法二：
        在方法中使用代码，allure.dynamic.severity(allure.severity_level.BLOCKER)
    2）描述
        方法一：
        使用装饰器加到类的方法上，@allure.description('用户的登录接口成功用例')

        方法二：
        在方法中使用代码，allure.dynamic.description('注册接口测试用例')
    3）链接（不怎么使用）
    注意参数问题，多参数需要加url=,name=...
    接口地址，使用装饰器放到方法上或者代码放到方法内
    @allure.link('接口访问的链接')
    allure.dynamic.link('接口访问的链接')

    接口BUG链接，使用装饰器放到方法上或者代码放到方法内
    @allure.issue('bug链接')
    allure.dynamic.issue('bug链接')   #新pytest不支持

    测试用例链接，使用装饰器放到方法上或者代码放到方法内
    @allure.testcase('用例链接')
    allure.dynamic.testcase('用例链接')    #新pytest不支持

    4）执行（步骤）
    方法上加装饰器 @allure.step('步骤')    #一般不这么用，因为步骤可能有多条

    常用方法
        方法中写 with allure.step('第一步。。。')
        重复的步骤可以用循环：
        for i in range(1,6):
            with allure.step(f'第{a}步：。。。。')：
                print(f'步骤{a}')
    加入文件附件，例如web自动化的错误截图(driver.save_screenshot('')),主要传三个参数，内容、名称、类型
    写法为:需注意body传的是内容，而不是路径，需要先打开文件，将内容读进去
        with allure.step('第7步：步骤7'):
            with open('E:/aaa.jpg',mode='rb') as f:
                allure.attach(body=f.read(),name='第7步图片',attachment_type=allure.attachment_type.JPG)

    接口自动化则是加请求方式、请求路径、请求参数、请求头、响应内容等信息
    allure.attach(body='get',name='请求方式',attachment_type=allure.attachment_type.TEXT)
    allure.attach(body='接口url',name='请求路径',attachment_type=allure.attachment_type.TEXT)
    allure.attach(body='参数',name='请求参数',attachment_type=allure.attachment_type.TEXT)
    allure.attach(body='请求头信息',name='请求头',attachment_type=allure.attachment_type.TEXT)

一般在定制时，常用的有：
    必用：
    一般只写一次
    @allure.epic() 项目名
    @allure.feature() 模块名

    @allure.story() 接口名
    @allure.title() 用例名称
    @allure.description() 用例描述
    可用：
    with allure.step() 用例步骤
    allure.attach() 用例附件（错误截图、文本）

3、公司局域网中访问报告
    修改run.py,生成报告后打开即可,生成报告，再打开报告
    os.system('allure open ./reports')
    由于是在局域网中打开，把浏览器的报告地址发给相关人员即可

需要注意的是，这些定制在接口自动化并不重要，可以查日志等查看数据，但在ui自动化时，只能这样写